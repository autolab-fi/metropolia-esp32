[
  {
    "name": "Introduction to the Rover",
    "description": "Getting familiar with the Mission Control and control the Rover.",
    "sn": 0,
    "str_id": "module_0",
    "lessons": [
      {
        "str_id": "rovers_trajectory",
        "name": "Rover's Trajectory",
        "url": "https://raw.githubusercontent.com/autolab-fi/metropolia-esp32/refs/heads/main/lessons/module_0/rover's_trajectory.md",
        "sn": 0,
        "description": "Introduction to the platform, listing all peripherals, describing what we will be working with, and outlining any restrictions on libraries and tag words.",
        "template": "// Include the library for controlling the robot\n#include <rover.h>\n// The setup() function runs once when the rover is powered on or reset\nvoid setup() {\n\t// Comment lines with commands you do not want to use\n\t// To comment out a line, just add \"//\" at the beginning of the line\n\trover.turnLeftAngle(45);\n\trover.moveForwardDistance(20);\n\trover.turnRight();\n\trover.moveForwardDistance(20);\n\trover.turnRight();\n\trover.moveForwardDistance(20);\n\trover.turnRight();\n\trover.moveForwardDistance(20);\n}\n\n// The loop() function runs repeatedly after setup() has finished\nvoid loop() {\n\t// No instructions for continuous execution\n}"
      },
      {
        "str_id": "test_mission",
        "name": "Test Mission",
        "url": "https://raw.githubusercontent.com/autolab-fi/metropolia-esp32/refs/heads/main/lessons/module_0/test_mission.md",
        "sn": 1,
        "description": "Some introductory words on moving the robot forward using a library.",
        "template": "#include <rover.h>\nvoid setup() {\n\t// Write movement function here\n}\nvoid loop(){\n}"
      },
      {
        "str_id": "permit_for_operation",
        "url": "https://raw.githubusercontent.com/autolab-fi/metropolia-esp32/refs/heads/main/lessons/module_0/permit_for_operation.md",
        "sn": 2,
        "name": "Permit for Operation",
        "description": "Writing a simple program independently, similar to the previous lesson.",
        "template": "#include <rover.h>\nvoid setup() {\n\t// Write movement function here\n}\nvoid loop(){\n}"
      }
    ]
  },
  {
    "name": "Operate the Rover",
    "description": "Demonstrating the Rover's capabilities.",
    "sn": 1,
    "str_id": "module_1",
    "lessons": [
      {
        "str_id": "mission_zero",
        "url": "https://raw.githubusercontent.com/autolab-fi/metropolia-esp32/refs/heads/main/lessons/module_1/mission_zero.md",
        "sn": 3,
        "name": "Mission Zero",
        "description": "Using library functions to move a specific distance, both forward and backward.",
        "template": "#include <rover.h>\nvoid setup() {\n\t// Write movement functions here\n}\nvoid loop(){\n}"
      },
      {
        "str_id": "maneuvering",
        "url": "https://raw.githubusercontent.com/autolab-fi/metropolia-esp32/refs/heads/main/lessons/module_1/first_maneuvering.md",
        "sn": 4,
        "name": "Maneuvering",
        "description": "Turning right and left in place. Task: Read data from a file and write it to another.",
        "template": "#include <rover.h>\nvoid setup() {\n\t// Write functions to rotate rover here\n}\nvoid loop(){\n}"
      },
      {
        "str_id": "your_first_mission",
        "url": "https://raw.githubusercontent.com/autolab-fi/metropolia-esp32/refs/heads/main/lessons/module_1/your_first_mission.md",
        "sn": 5,
        "name": "Your First Mission",
        "description": "Writing a program with a sequence of commands to move along a trajectory depicted in the diagram.",
        "template": "#include <rover.h>\nvoid setup() {\n\t// Write sequnce of movement functions here\n}\nvoid loop(){\n}"
      }
    ]
  },
  {
    "name": "Controlling LEDs",
    "description": "Basic arduino functions of working with GPIO using LEDs as examples.",
    "sn": 2,
    "str_id": "module_2",
    "lessons": [
      {
        "str_id": "headlights",
        "url": "https://raw.githubusercontent.com/autolab-fi/metropolia-esp32/refs/heads/main/lessons/module_2/headlights.md",
        "sn": 6,
        "name": "Headlights",
        "description": "Understanding how LEDs work. Task: Turning on LEDs.",
        "template": "#include <rover.h>\nvoid setup() {\n\t// Write code to tutn on led here\n}\nvoid loop(){\n}"
      },
      {
        "str_id": "hazard_lights",
        "url": "https://raw.githubusercontent.com/autolab-fi/metropolia-esp32/refs/heads/main/lessons/module_2/hazard_lights.md",
        "sn": 7,
        "name": "Hazard Lights",
        "description": "More about the digitalWrite() and pinMode() functions. Task: Blinking LEDs.",
        "template": "#include <rover.h>\nvoid setup() {\n\t// Use the pinMode function here\n}\nvoid loop(){\n\t// Write code to turn the LED on and off here, and don't forget to add pauses \n}"
      }
    ]
  },
  {
    "name": "Low Level Control",
    "description": "Studying robot kinematics. Writing functions. What are DC motors.",
    "sn": 3,
    "str_id": "module_3",
    "lessons": [
      {
        "str_id": "manual_control",
        "url": "https://raw.githubusercontent.com/autolab-fi/metropolia-esp32/refs/heads/main/lessons/module_3/manual_control.md",
        "sn": 8,
        "name": "Manual Control",
        "description": "An introduction to the robot's kinematics. Task: Experiment with functions for moving the robot forward.",
        "template": "#include <rover.h>\nvoid setup() {\n\t// Write code to run and stop the motors here\n}\nvoid loop(){\n}"
      },
      {
        "str_id": "sequenced_commands",
        "url": "https://raw.githubusercontent.com/autolab-fi/metropolia-esp32/refs/heads/main/lessons/module_3/sequenced_commands.md",
        "sn": 9,
        "name": "Sequenced commands",
        "description": "Writing functions in Arduino. Task: Write a function to perform the following sequence: move forward 20cm, turn approximately 180 degrees",
        "template": "#include <rover.h>\nvoid setup() {\n\t// Call your function here\n}\nvoid loop(){\n}\n // Write your function here"
      },
      {
        "str_id": "electric_motor",
        "url": "https://raw.githubusercontent.com/autolab-fi/metropolia-esp32/refs/heads/main/lessons/module_3/electric_motor.md",
        "sn": 10,
        "name": "Electric Motor",
        "description": "Basic principles of DC motors. Task: Move to a specific point on the map using only functions for controlling motors.",
        "template": "#include <rover.h>\n\n// We recommend writing a function to control the robot's movement \nvoid setup() {\n\t// Call your function here \n}\nvoid loop(){\n}\n // Write your function here"
      }
    ]
  },
  {
    "name": "Precise Movement",
    "description": "Explore the use of encoders in robotics, covering their purpose, types, and practical applications for movement control!",
    "sn": 4,
    "str_id": "module_4",
    "lessons": [
      {
        "str_id": "precise_movements",
        "name": "Precise Movement with Encoders",
        "url": "https://raw.githubusercontent.com/autolab-fi/metropolia-esp32/refs/heads/main/lessons/module_4/precise_movement.md",
        "sn": 11,
        "description": "This lesson introduces encoders as sensors for measuring wheel rotation and and provides practical exercise to read encoder values.",
        "template": "#include <rover.h>\nvoid setup() {\n\t// Reset encoders values\n\trover.resetLeftEncoder();\n\trover.resetRightEncoder();\n\t// Read start position values\n\tprintMQTT(\"START POSITION\");\n\tprintMQTT(\"LEFT:\");\n\t// Will take encoder values in degrees\n\t// Assume one rotation ~360Â°\n\t// printMQTT(rover.encoderDegreesLeft()); // TODO: this line should be done by student\n\tprintMQTT(\"RIGHT:\");\n\t//printMQTT(rover.encoderDegreesRight()); // TODO: this line should be done by student\n\n\t// Move forward\n\trover.moveForwardDistance(3.5 * 2 * 3.14159);  // one rotation forward (wheels diameter * pi)\n\tprintMQTT(\"FORWARD MOVEMENT POSITION\");\n\tprintMQTT(\"LEFT:\");\n\t//printMQTT(rover.encoderDegreesLeft()); // TODO: this line should be done by student\n\tprintMQTT(\"RIGHT:\");\n\t//printMQTT(rover.encoderDegreesRight()); // TODO: this line should be done by student\n\t\n\tdelay(500);\n\t\n\t// Move backward\n\trover.moveBackwardDistance(3.5 * 2 * 3.14159);  // one rotation backward (wheels diameter * pi)\n\tprintMQTT(\"BACKWARD MOVEMENT POSITION\");\n\tprintMQTT(\"LEFT:\");\n\t// printMQTT(rover.encoderDegreesLeft()); //TODO: this line should be done by student\n\tprintMQTT(\"RIGHT:\");\n\t//printMQTT(rover.encoderDegreesRight());\t//TODO: this line should be done by student\n}\n\nvoid loop() {\n\tdelay(1000);\n}"
      }
    ]
  },
  {
    "name": "Line Sensor Introduction",
    "description": "Understanding how IR line sensors work and detecting black lines using the Octoliner sensor array.",
    "sn": 5,
    "str_id": "module_5",
    "lessons": [
      {
        "str_id": "Getting Started with Debugging Monitor",
        "name": "Getting Started with Debugging Monitor",
        "url": "https://raw.githubusercontent.com/autolab-fi/metropolia-esp32/refs/heads/main/lessons/module_5/Introduction.md",
        "sn": 12,
        "description": "Learn how to use the debugging monitor to troubleshoot and optimize your robot's performance effectively. It can be used in all the modules to monitor the values of sensors and variables.",
        "template": "//Paste the code here"
      },
      {
        "str_id": "line_sensor_intro",
        "name": "Line Sensor and Black Line Detection",
        "url": "https://raw.githubusercontent.com/autolab-fi/metropolia-esp32/refs/heads/main/lessons/module_5/line_senosor_intro.md",
        "sn": 13,
        "description": "This lesson focuses on understanding how an Octoliner sensor detects black lines using IR sensors and implementing black line detection.",
        "template": "#include <Octoliner.h>\n\n// I2C Address (default 42)\nOctoliner octoliner(42);\n\n// Black threshold for detection\nconst int MY_BLACK_THRESHOLD = 100;\n\nvoid setup() {\n    octoliner.begin();\n    octoliner.setSensitivity(245);  // Adjust sensitivity if needed\n}\n\nvoid loop() {\n    int value1 = octoliner.analogRead(1);\n}"
      }
    ]
  },
  {
    "name": "Programming Fundamentals",
    "description": "Essential programming concepts including variables, conditional statements, loops, and arrays for robot control.",
    "sn": 6,
    "str_id": "module_6",
    "lessons": [
      {
        "str_id": "introduction_to_variables_and_conditional_statements",
        "name": "Introduction to Variables and Conditional Statements",
        "url": "https://raw.githubusercontent.com/autolab-fi/metropolia-esp32/refs/heads/main/lessons/module_6/Introduction%20to%20Variables%20and%20Conditional%20Statements.md",
        "sn": 14,
        "description": "Learn how to declare and use variables in programming, and apply conditional logic using if, else if, and else statements.",
        "template": "#include <Octoliner.h>\n#include <rover.h>\n\n// I2C Address (default 42)\nOctoliner octoliner(42);\n\nvoid setup() {\n    octoliner.begin();\n    octoliner.setSensitivity(245);\n}\n\nvoid loop() {\n    // Read values from all sensors (0 - 7)\n    int value_0 = octoliner.analogRead(0);\n    int value_1 = octoliner.analogRead(1);\n\n    // YOUR CODE HERE:\n    // Add if-else if-else statements to determine which sensor(s) detect the line\n\n}"
      },
      {
        "str_id": "loops_and_conditional_logic",
        "name": "Loops and Conditional Logic",
        "url": "https://raw.githubusercontent.com/autolab-fi/metropolia-esp32/refs/heads/main/lessons/module_6/Loops%20and%20Conditional%20Logic.md",
        "sn": 15,
        "description": "Learn how to repeat actions using for and while loops combined with conditional statements.",
        "template": "#include <Octoliner.h>\n#include <rover.h>\n\n// I2C Address (default 42)\nOctoliner octoliner(42);\n\nvoid setup() {\n    octoliner.begin();\n    octoliner.setSensitivity(245);\n}\n\nvoid loop() {\n    // YOUR CODE HERE:\n    // Use a loop to read and print values from all 8 sensors (0-7)\n\n}"
      },
      {
        "str_id": "array_and_processing_data",
        "name": "Arrays and Processing Data with Loops",
        "url": "https://raw.githubusercontent.com/autolab-fi/metropolia-esp32/refs/heads/main/lessons/module_6/Arrays%20and%20Processing%20Data%20with%20Loops.md",
        "sn": 16,
        "description": "Understand how to use arrays to store and analyze sensor data with systematic data collection.",
        "template": "#include <Octoliner.h>\n#include <rover.h>\n\n// I2C Address (default 42)\nOctoliner octoliner(42);\nconst int MY_BLACK_THRESHOLD = 100;\n\nvoid setup() {\n    octoliner.begin();\n    octoliner.setSensitivity(245);\n\n    // YOUR CODE HERE:\n    // 1. Create three arrays to store 8 sensor readings each\n    // 2. Take measurements at different rover positions\n    // 3. Send all data systematically using printMQTT()\n\n}\n\nvoid loop() {\n    // Empty - all work done in setup()\n}"
      }
    ]
  },
  {
    "name": "Advanced Line Following",
    "description": "Advanced line following techniques including relay, P, PI, and PID controllers for smooth and accurate robot movement.",
    "sn": 7,
    "str_id": "module_7",
    "lessons": [
      {
        "str_id": "basic_line_follower",
        "name": "Relay, P, and PI Controllers",
        "url": "https://raw.githubusercontent.com/autolab-fi/metropolia-esp32/refs/heads/main/lessons/module_7/basic_line_follower.md",
        "sn": 17,
        "description": "Understand how different types of controllers work â Relay, Proportional (P), and Proportional-Integral (PI) for line following.",
        "template": "#include <Octoliner.h>\n#include <rover.h>\n\n// I2C Address (default 42)\nOctoliner octoliner(42);\nint speed=30;\n\n// Black threshold for detection\nconst int MY_BLACK_THRESHOLD = 100;\n\nvoid setup() {\n    octoliner.begin();\n    octoliner.setSensitivity(230);\n}\n\nvoid loop() {\n    // Read all sensor values\n    for (uint8_t i = 0; i < 8; i++) {\n       int value = octoliner.analogRead(i);\n    }\n    rover.runMotorSpeedRight(speed);\n    rover.runMotorSpeedLeft(speed);\n}"
      },
      {
        "str_id": "pi",
        "name": "P and PI Controllers",
        "url": "https://raw.githubusercontent.com/autolab-fi/metropolia-esp32/refs/heads/main/lessons/module_7/P%20and%20PI.md",
        "sn": 18,
        "description": "Learn about Proportional and Proportional-Integral controllers for improved line following performance.",
        "template": "//Paste the code here"
      },
      {
        "str_id": "pid",
        "name": "PID Controller",
        "url": "https://raw.githubusercontent.com/autolab-fi/metropolia-esp32/refs/heads/main/lessons/module_7/PID.md",
        "sn": 19,
        "description": "Implement a complete PID controller combining proportional, integral, and derivative terms for optimal line following.",
        "template": "//Paste the code here"
      }
    ]
  }
]
