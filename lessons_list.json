[
  {
    "name": "Introduction to the Robot",
    "description": "Getting familiar with the platform and learning how to control the robot.",
    "sn": 0,
    "str_id": "module_0",
    "lessons": [
      {
        "str_id": "draw",
        "name": "Drawing",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_1/draw.md",
        "sn": 0,
        "description": "Introduction to the platform, listing all peripherals, describing what we will be working with, and outlining any restrictions on libraries and tag words.",
        "template": "// Include the library for controlling the robot\n#include <lineRobot.h>\n// The setup() function runs once when the robot is powered on or reset\nvoid setup() {\n\t// Comment lines with commands you do not want to use\n\t// To comment out a line, just add \"//\" at the beginning of the line\n\trobot.turnLeftAngle(45);\n\trobot.moveForwardDistance(20);\n\trobot.turnRight();\n\trobot.moveForwardDistance(20);\n\trobot.turnRight();\n\trobot.moveForwardDistance(20);\n\trobot.turnRight();\n\trobot.moveForwardDistance(20);\n}\n\n// The loop() function runs repeatedly after setup() has finished\nvoid loop() {\n\t// No instructions for continuous execution\n}"
      },
      {
        "str_id": "test_drive",
        "name": "Test drive",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_1/test_drive.md",
        "sn": 1,
        "description": "Some introductory words on moving the robot forward using a library.",
        "template": "// Paste code here"
      },
      {
        "str_id": "license_to_drive",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_1/license_to_drive.md",
        "sn": 2,
        "name": "License to drive",
        "description": "Writing a simple program independently, similar to the previous lesson.",
        "template": "#include <lineRobot.h>\nvoid setup() {\n\t// Write movement function here\n}\nvoid loop(){\n}"
      }
    ]
  },
  {
    "name": "Controlling Robot Movement",
    "description": "Demonstrating the robot's capabilities.",
    "sn": 1,
    "str_id": "module_1",
    "lessons": [
      {
        "str_id": "short_distance_race",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_1/short_distance_race.md",
        "sn": 3,
        "name": "Short distance race",
        "description": "Using library functions to move a specific distance, both forward and backward.",
        "template": "#include <lineRobot.h>\nvoid setup() {\n\t// Write movement functions here\n}\nvoid loop(){\n}"
      },
      {
        "str_id": "maneuvering",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_1/maneuvering.md",
        "sn": 4,
        "name": "Maneuvering",
        "description": "Turning right and left in place. Task: Read data from a file and write it to another.",
        "template": "#include <lineRobot.h>\nvoid setup() {\n\t// Write functions to rotate robot here\n}\nvoid loop(){\n}"
      },
      {
        "str_id": "long_distance_race",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_1/long_distance_race.md",
        "sn": 5,
        "name": "Fruit Ninja",
        "description": "Writing a program with a sequence of commands to move along a trajectory depicted in the diagram.",
        "template": "#include <lineRobot.h>\nvoid setup() {\n\t// Write sequnce of movement functions here\n}\nvoid loop(){\n}"
      }
    ]
  },
  {
    "name": "Controlling LEDs",
    "description": "Basic arduino functions of working with GPIO using LEDs as examples.",
    "sn": 2,
    "str_id": "module_2",
    "lessons": [
      {
        "str_id": "headlights",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_2/headlights.md",
        "sn": 6,
        "name": "Headlights",
        "description": "Understanding how LEDs work. Task: Turning on LEDs.",
        "template": "#include <lineRobot.h>\nvoid setup() {\n\t// Write code to tutn on led here\n}\nvoid loop(){\n}"
      },
      {
        "str_id": "alarm",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_2/alarm.md",
        "sn": 7,
        "name": "Robot's alarm",
        "description": "More about the digitalWrite() and pinMode() functions. Task: Blinking LEDs.",
        "template": "#include <lineRobot.h>\nvoid setup() {\n\t// Use the pinMode function here\n}\nvoid loop(){\n\t// Write code to turn the LED on and off here, and don't forget to add pauses \n}"
      }
    ]
  },
  {
    "name": "Controlling Motors",
    "description": "Studying robot kinematics. Writing functions. What are DC motors.",
    "sn": 3,
    "str_id": "module_3",
    "lessons": [
      {
        "str_id": "differential_drive",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_3/differential_drive.md",
        "sn": 8,
        "name": "Differential drive",
        "description": "An introduction to the robot's kinematics. Task: Experiment with functions for moving the robot forward.",
        "template": "#include <lineRobot.h>\nvoid setup() {\n\t// Write code to run and stop the motors here\n}\nvoid loop(){\n}"
      },
      {
        "str_id": "move_function",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_3/move_function.md",
        "sn": 9,
        "name": "Movement Function",
        "description": "Writing functions in Arduino. Task: Write a function to rotate the robot.",
        "template": "#include <lineRobot.h>\nvoid setup() {\n\t// Call your function here\n}\nvoid loop(){\n}\n // Write your function here"
      },
      {
        "str_id": "electric_motor",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_3/electric_motor.md",
        "sn": 10,
        "name": "Electric Motor",
        "description": "Basic principles of DC motors. Task: Move to a specific point on the map using only functions for controlling motors.",
        "template": "#include <lineRobot.h>\n\n// We recommend writing a function to control the robot's movement \nvoid setup() {\n\t// Call your function here \n}\nvoid loop(){\n}\n // Write your function here"
      }
    ]
  },
  {
    "name": "Encoders",
    "description": "Explore the use of encoders in robotics, covering their purpose, types, and practical applications for movement control!",
    "sn": 4,
    "str_id": "module_4",
    "lessons": [
      {
        "str_id": "encoders",
        "name": "Encoder",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_4/encoders_en.md",
        "sn": 11,
        "description": "This lesson introduces encoders as sensors for measuring wheel rotation and and provides practical exercise to read encoder values.",
        "template": "#include <lineRobot.h>\nvoid setup() {\n\t// Reset encoders values\n\trobot.resetLeftEncoder();\n\trobot.resetRightEncoder();\n\t// Read start position values\n\tprintMQTT(\"START POSITION\");\n\tprintMQTT(\"LEFT:\");\n\t// Will take encoder values in degrees\n\t// Assume one rotation ~360Â°\n\t// printMQTT(robot.encoderDegreesLeft()); // TODO: this line should be done by student\n\tprintMQTT(\"RIGHT:\");\n\t//printMQTT(robot.encoderDegreesRight()); // TODO: this line should be done by student\n\n\t// Move forward\n\trobot.moveForwardDistance(3.5 * 2 * 3.14159);  // one rotation forward (wheels diameter * pi)\n\tprintMQTT(\"FORWARD MOVEMENT POSITION\");\n\tprintMQTT(\"LEFT:\");\n\t//printMQTT(robot.encoderDegreesLeft()); // TODO: this line should be done by student\n\tprintMQTT(\"RIGHT:\");\n\t//printMQTT(robot.encoderDegreesRight()); // TODO: this line should be done by student\n\t\n\tdelay(500);\n\t\n\t// Move backward\n\trobot.moveBackwardDistance(3.5 * 2 * 3.14159);  // one rotation backward (wheels diameter * pi)\n\tprintMQTT(\"BACKWARD MOVEMENT POSITION\");\n\tprintMQTT(\"LEFT:\");\n\t// printMQTT(robot.encoderDegreesLeft()); //TODO: this line should be done by student\n\tprintMQTT(\"RIGHT:\");\n\t//printMQTT(robot.encoderDegreesRight());\t//TODO: this line should be done by student\n}\n\nvoid loop() {\n\tdelay(1000);\n}"
      }
    ]
  },
  {
    "name": "Line Sensor Introduction",
    "description": "Understanding how IR line sensors work and detecting black lines using the Octoliner sensor array.",
    "sn": 5,
    "str_id": "module_6",
    "lessons": [
      {
        "str_id": "line_senosor_intro",
        "name": "Line Sensor and Black Line Detection",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_6/line_senosor_intro.md",
        "sn": 12,
        "description": "This lesson focuses on understanding how an Octoliner sensor detects black lines using IR sensors and implementing black line detection.",
        "template": "#include <Octoliner.h>\n\n// I2C Address (default 42)\nOctoliner octoliner(42);\n\n// Black threshold for detection\nconst int MY_BLACK_THRESHOLD = 100;\n\nvoid setup() {\n    octoliner.begin();\n    octoliner.setSensitivity(245);  // Adjust sensitivity if needed\n}\n\nvoid loop() {\n    int value1 = octoliner.analogRead(1);\n}"
      }
    ]
  },
  {
    "name": "Programming Fundamentals",
    "description": "Essential programming concepts including variables, conditional statements, loops, and arrays for robot control.",
    "sn": 6,
    "str_id": "module_7",
    "lessons": [
      {
        "str_id": "variables_conditionals",
        "name": "Introduction to Variables and Conditional Statements",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_7/Introduction%20to%20Variables%20and%20Conditional%20Statements.md",
        "sn": 13,
        "description": "Learn how to declare and use variables in programming, and apply conditional logic using if, else if, and else statements.",
        "template": "#include <Octoliner.h>\n#include <lineRobot.h>\n\n// I2C Address (default 42)\nOctoliner octoliner(42);\n\nvoid setup() {\n    octoliner.begin();\n    octoliner.setSensitivity(245);\n}\n\nvoid loop() {\n    // Read values from all sensors (0 - 7)\n    int value_0 = octoliner.analogRead(0);\n    int value_1 = octoliner.analogRead(1);\n\n    // YOUR CODE HERE:\n    // Add if-else if-else statements to determine which sensor(s) detect the line\n\n}"
      },
      {
        "str_id": "loops_conditional_logic",
        "name": "Loops and Conditional Logic",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_7/Loops%20and%20Conditional%20Logic.md",
        "sn": 14,
        "description": "Learn how to repeat actions using for and while loops combined with conditional statements.",
        "template": "#include <Octoliner.h>\n#include <lineRobot.h>\n\n// I2C Address (default 42)\nOctoliner octoliner(42);\n\nvoid setup() {\n    octoliner.begin();\n    octoliner.setSensitivity(245);\n}\n\nvoid loop() {\n    // YOUR CODE HERE:\n    // Use a loop to read and print values from all 8 sensors (0-7)\n\n}"
      },
      {
        "str_id": "arrays_data_processing",
        "name": "Arrays and Processing Data with Loops",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_7/Arrays%20and%20Processing%20Data%20with%20Loops.md",
        "sn": 15,
        "description": "Understand how to use arrays to store and analyze sensor data with systematic data collection.",
        "template": "#include <Octoliner.h>\n#include <lineRobot.h>\n\n// I2C Address (default 42)\nOctoliner octoliner(42);\nconst int MY_BLACK_THRESHOLD = 100;\n\nvoid setup() {\n    octoliner.begin();\n    octoliner.setSensitivity(245);\n\n    // YOUR CODE HERE:\n    // 1. Create three arrays to store 8 sensor readings each\n    // 2. Take measurements at different robot positions\n    // 3. Send all data systematically using printMQTT()\n\n}\n\nvoid loop() {\n    // Empty - all work done in setup()\n}"
      }
    ]
  },
  {
    "name": "Advanced Line Following",
    "description": "Advanced line following techniques including relay, P, PI, and PID controllers for smooth and accurate robot movement.",
    "sn": 7,
    "str_id": "module_8",
    "lessons": [
      {
        "str_id": "basic_line_follower",
        "name": "Relay, P, and PI Controllers",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_8/basic_line_follower.md",
        "sn": 16,
        "description": "Understand how different types of controllers work â Relay, Proportional (P), and Proportional-Integral (PI) for line following.",
        "template": "#include <Octoliner.h>\n#include <lineRobot.h>\n\n// I2C Address (default 42)\nOctoliner octoliner(42);\nint speed=30;\n\n// Black threshold for detection\nconst int MY_BLACK_THRESHOLD = 100;\n\nvoid setup() {\n    octoliner.begin();\n    octoliner.setSensitivity(230);\n}\n\nvoid loop() {\n    // Read all sensor values\n    for (uint8_t i = 0; i < 8; i++) {\n       int value = octoliner.analogRead(i);\n    }\n    robot.runMotorSpeedRight(speed);\n    robot.runMotorSpeedLeft(speed);\n}"
      },
      {
        "str_id": "p_pi_controllers",
        "name": "P and PI Controllers",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_8/P%20and%20PI.md",
        "sn": 17,
        "description": "Learn about Proportional and Proportional-Integral controllers for improved line following performance.",
        "template": "//Paste the code here"
      },
      {
        "str_id": "pid_controller",
        "name": "PID Controller",
        "url": "https://raw.githubusercontent.com/autolab-fi/line-robot-curriculum/main/lessons/module_8/PID.md",
        "sn": 18,
        "description": "Implement a complete PID controller combining proportional, integral, and derivative terms for optimal line following.",
        "template": "//Paste the code here"
      }
    ]
  }
]
